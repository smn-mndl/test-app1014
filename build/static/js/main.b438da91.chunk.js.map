{"version":3,"sources":["logo.svg","App/DataModel/PA-ContextDataModel.js","App/DataModel/PA-ContextProvider.js","App.js","serviceWorker.js","Components/LoginPage/LoginPage.js","Components/Register/Register.js","index.js"],"names":["module","exports","__webpack_require__","p","ContextDataModel","AppDataModel","x","light","foreground","background","dark","Indicator","PAProvider","React","createContext","Provider","PAContextProvider","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateState","updatedState","localAppDataModel","clone","state","appDataModel","each","keys","updatedDataItemKey","includes","setState","react_default","a","createElement","value","children","Component","App","console","log","className","src","logo","alt","href","target","rel","contextType","Boolean","window","location","hostname","match","LoginPage","handleOnClick","redirect","username","password","_this2","react_router","push","to","Fragment","class","inputtext","id","onChange","e","htmlFor","type","onClick","Register","checkForAlltheFields","flag","emptyField","some","length","checkForPasswordMatch","passwordField","passwordValue","obj","passFlag","secondpassword","firstpassword","checkForPasswordPattern","checkForEmailPattern","test","email","onSubmitRegister","showSuccess","showError","firstname","lastname","detail","messages","show","severity","summary","ref","el","primereact_password","feedback","routing","react_router_dom","exact","path","component","PixLet","PA_ContextProvider","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oSCE3BC,SAAmB,CAC5BC,aAAe,CACXC,EAAE,GAENC,MAAO,CACHC,WAAY,UACZC,WAAY,WAEdC,KAAM,CACJF,WAAY,UACZC,WAAY,WAEdE,WAAY,YCPLC,EADYC,IAAMC,gBACKC,SAiCrBC,cA9BX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQVQ,YAAc,SAACC,GAEXR,EAAKS,kBAAoBC,gBAAMV,EAAKW,MAAMC,cAC1CC,eAAKC,eAAKN,GAAc,SAACO,GAClBD,eAAKd,EAAKW,MAAMC,cAAcI,SAASD,KACtCf,EAAKS,kBAAkBM,GAAsBP,EAAaO,MAGlEf,EAAKiB,SAAS,CACVL,aAAcZ,EAAKS,qBAfvBT,EAAKW,MAAQ,CACTC,aAAe1B,EACfqB,YAAa,IALHP,wEAsBd,OACIkB,EAAAC,EAAAC,cAAC1B,EAAD,CAAY2B,MAAS,CAACV,MAAMR,KAAKQ,MAAOJ,YAAYJ,KAAKI,cACpDJ,KAAKJ,MAAMuB,iBAzBIC,aCJ1BC,cACJ,SAAAA,EAAYzB,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,GAAAvB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAlB,KAAAH,KACZJ,0EAIN,OADA0B,QAAQC,IAAI,eAAevB,MAEzBe,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAA,UAAQO,UAAU,cAChBT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCZ,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEO,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,wBAbQV,aA6BlBC,EAAIU,YAAcpC,ECtBEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGC0FSC,cAlGX,SAAAA,EAAYzC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,IACfxC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuC,GAAAlC,KAAAH,KAAMJ,KAOV0C,cAAgB,WAGZzC,EAAKiB,SAAS,CAACyB,UAAU,KATzB1C,EAAKW,MAAO,CACRgC,SAAU,GACVC,SAAU,IAJC5C,wEAaV,IAAA6C,EAAA1C,KACL,OAAIA,KAAKQ,MAAM+B,SACJxB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAUC,MAAI,EAACC,GAAG,cAGzB9B,EAAAC,EAAAC,cAACF,EAAAC,EAAM8B,SAAP,KACI/B,EAAAC,EAAAC,cAAA,OAAKO,UAAU,iBAAf,SAGAT,EAAAC,EAAAC,cAAA,OAAK8B,MAAM,aACXhC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACXT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,sBACfT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,qBAEfT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,eACfT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACfT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,iBACZT,EAAAC,EAAAC,cAAC+B,EAAA,UAAD,CAAWC,GAAG,KAAK/B,MAAOlB,KAAKQ,MAAMgC,SAAUU,SAAU,SAACC,GAAD,OAAOT,EAAK5B,SAAS,CAAC0B,SAAUW,EAAEtB,OAAOX,WAClGH,EAAAC,EAAAC,cAAA,SAAOmC,QAAQ,MAAf,+BAIJrC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACfT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,iBACZT,EAAAC,EAAAC,cAAC+B,EAAA,UAAD,CAAWC,GAAG,KAAK/B,MAAOlB,KAAKQ,MAAMiC,SAAUS,SAAU,SAACC,GAAD,OAAOT,EAAK5B,SAAS,CAAC2B,SAAUU,EAAEtB,OAAOX,WAClGH,EAAAC,EAAAC,cAAA,SAAOmC,QAAQ,MAAf,cAIJrC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACXT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,4BACZT,EAAAC,EAAAC,cAAA,UAAQoC,KAAK,SAAS7B,UAAU,mBAAhC,YAIRT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACXT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,4BAAhB,qCAKJT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACXT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,4BACZT,EAAAC,EAAAC,cAAA,UAAQoC,KAAK,SAAS7B,UAAU,kBAAkB8B,QAAStD,KAAKsC,eAAhE,yBAzDJlB,6CC+OTmC,2BA1Ob,SAAAA,EAAY3D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuD,IACjB1D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyD,GAAApD,KAAAH,KAAMJ,KAUR0C,cAAgB,WAGdzC,EAAKiB,SAAS,CAAEyB,UAAU,KAdT1C,EAiBnB2D,qBAAuB,WACrB,IAAIhD,EAAQX,EAAKW,MACbiD,GAAO,EACTC,EAAa,GAQf,OAPA5D,OAAOa,KAAKH,GAAOmD,KAAK,SAAAjD,GACtB,GAA2B,IAAvBF,EAAME,GAAMkD,OAGd,OAFAH,GAAO,EACPC,EAAahD,IAIV,CAAE+C,KAAMA,EAAMC,WAAYA,IA5BhB7D,EA+BnBgE,sBAAwB,SAACC,EAAeC,GACtC,IAAIC,EAAM,GACVA,EAAIF,GAAiBC,EACrB,IAAIE,GAAW,EAWf,OAVApE,EAAKiB,SAASkD,EAAK,YAEG,kBAAlBF,EACIjE,EAAKW,MAAM0D,eACXrE,EAAKW,MAAM2D,iBACCJ,GAAiBlE,EAAKW,MAAM0D,eAAeN,OAAS,IACpEK,GAAW,KAIRA,GA7CUpE,EAgDnBuE,wBAA0B,WAIxB,OAHgBvE,EAAKW,MAAM2D,cAGVP,OAAS,GApDT/D,EAuDnBwE,qBAAuB,WAErB,MADS,mCACCC,KAAKzE,EAAKW,MAAM+D,QAzDT1E,EA4DnB2E,iBAAmB,WACjB,IAAIvF,EAAIY,EAAK2D,uBAOblC,QAAQC,IAAItC,GACRA,EAAEwE,KAKF5D,EAAK4E,YAAY,2BASnB5E,EAAK6E,UAAU,6BAjFjB7E,EAAKW,MAAQ,CACXmE,UAAW,GACXC,SAAU,GACVT,cAAe,GACfD,eAAgB,GAChBK,MAAO,IAPQ1E,2EAuFPgF,GACV7E,KAAK8E,SAASC,KAAK,CACjBC,SAAU,UACVC,QAAS,kBACTJ,OAAQA,qCAIHA,GACP7E,KAAK8E,SAASC,KAAK,CACjBC,SAAU,OACVC,QAAS,eACTJ,OAAQA,qCAIHA,GACP7E,KAAK8E,SAASC,KAAK,CAAEC,SAAU,OAAQC,QAAS,GAAIJ,OAAQA,sCAGpDA,GACR7E,KAAK8E,SAASC,KAAK,CAAEC,SAAU,QAASC,QAAS,GAAIJ,OAAQA,qCAEtD,IAAAnC,EAAA1C,KAEP,OAAIA,KAAKQ,MAAM+B,SACNxB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAUC,MAAI,EAACC,GAAG,MAGzB9B,EAAAC,EAAAC,cAACF,EAAAC,EAAM8B,SAAP,KAGE/B,EAAAC,EAAAC,cAAA,OAAKO,UAAU,iBAAf,YACAT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,eACbT,EAAAC,EAAAC,cAAC6D,EAAA,SAAD,CAAUI,IAAK,SAAAC,GAAE,OAAKzC,EAAKoC,SAAWK,MAGxCpE,EAAAC,EAAAC,cAAA,OAAK8B,MAAM,aACThC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,sBACfT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,qBACbT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,eACfT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACbT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,iBACdT,EAAAC,EAAAC,cAAC+B,EAAA,UAAD,CACEC,GAAG,KACH/B,MAAOlB,KAAKQ,MAAMmE,UAClBzB,SAAU,SAAAC,GAAC,OAAIT,EAAK5B,SAAS,CAAE6D,UAAWxB,EAAEtB,OAAOX,WAErDH,EAAAC,EAAAC,cAAA,SAAOmC,QAAQ,MAAf,gBAIJrC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACbT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,iBACdT,EAAAC,EAAAC,cAAC+B,EAAA,UAAD,CACEC,GAAG,KACH/B,MAAOlB,KAAKQ,MAAMoE,SAClB1B,SAAU,SAAAC,GAAC,OAAIT,EAAK5B,SAAS,CAAE8D,SAAUzB,EAAEtB,OAAOX,WAEpDH,EAAAC,EAAAC,cAAA,SAAOmC,QAAQ,MAAf,eAIJrC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACbT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,iBACdT,EAAAC,EAAAC,cAACmE,EAAA,SAAD,CACEC,UAAU,EACVpC,GAAG,KACH/B,MAAOlB,KAAKQ,MAAM2D,cAClBjB,SAAU,SAAAC,GAAC,OACTT,EAAKmB,sBACH,gBACAV,EAAEtB,OAAOX,UAIfH,EAAAC,EAAAC,cAAA,SAAOmC,QAAQ,MAAf,cAIJrC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACbT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,iBACdT,EAAAC,EAAAC,cAACmE,EAAA,SAAD,CACEC,UAAU,EACVpC,GAAG,KACH/B,MAAOlB,KAAKQ,MAAM0D,eAClBhB,SAAU,SAAAC,GAAC,OACTT,EAAKmB,sBACH,iBACAV,EAAEtB,OAAOX,UAIfH,EAAAC,EAAAC,cAAA,SAAOmC,QAAQ,MAAf,sBAIJrC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACbT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,iBACdT,EAAAC,EAAAC,cAAC+B,EAAA,UAAD,CACEK,KAAK,QACLJ,GAAG,KACH/B,MAAOlB,KAAKQ,MAAM+D,MAClBrB,SAAU,SAAAC,GAAC,OAAIT,EAAK5B,SAAS,CAAEyD,MAAOpB,EAAEtB,OAAOX,WAEjDH,EAAAC,EAAAC,cAAA,SAAOmC,QAAQ,MAAf,WAIJrC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACbT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,4BACdT,EAAAC,EAAAC,cAAA,UACEoC,KAAK,SACL7B,UAAU,kBACV8B,QAAS,kBAAMZ,EAAK8B,qBAHtB,YAUJzD,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACbT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,4BAAhB,oCAKFT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACbT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,4BACdT,EAAAC,EAAAC,cAAA,UACEoC,KAAK,SACL7B,UAAU,kBACV8B,QAAS,kBAAMZ,EAAKJ,kBAHtB,sBA1NKlB,cCDjBkE,EACFvE,EAAAC,EAAAC,cAACsE,EAAA,EAAD,KACExE,EAAAC,EAAAC,cAAA,WAYEF,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAO6C,OAAK,EAACC,KAAK,IAAIC,UAAWrD,IACjCtB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAO8C,KAAK,YAAYC,UAAWnC,MAMrCoC,EAAU5E,EAAAC,EAAAC,cAAC2E,EAAD,KAAoBN,GACpCO,IAASC,OAAOH,EAAQI,SAASC,eAAe,SH+F1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b438da91.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/** Suman - Application level data model, which will be persisted all the data at any point of time */\r\n\r\nexport const ContextDataModel = {\r\n    AppDataModel : {\r\n        x:2\r\n    },\r\n    light: {\r\n        foreground: '#000000',\r\n        background: '#eeeeee',\r\n      },\r\n      dark: {\r\n        foreground: '#ffffff',\r\n        background: '#222222',\r\n      },\r\n      Indicator : false\r\n}","/** Context wrapper that will maintain the application state and is single source of data */\r\n\r\nimport React, { Component } from 'react'\r\nimport {ContextDataModel} from \"./PA-ContextDataModel\";\r\nimport { clone , keys , each } from 'lodash'\r\n\r\nexport const PAContext = React.createContext();\r\nexport const PAProvider = PAContext.Provider;\r\n\r\nclass PAContextProvider extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        // console.log(\"dsfsdf\",ContextDataModel)\r\n        this.state = {\r\n            appDataModel : ContextDataModel,\r\n            updateState: {}\r\n        }\r\n    }\r\n\r\n    updateState = (updatedState) => {\r\n        /** Update the apt data model in the current state from the updatedStateObj */\r\n        this.localAppDataModel = clone(this.state.appDataModel);\r\n        each(keys(updatedState),(updatedDataItemKey)=>{\r\n            if(keys(this.state.appDataModel).includes(updatedDataItemKey)){\r\n                this.localAppDataModel[updatedDataItemKey] = updatedState[updatedDataItemKey]\r\n            }\r\n        })\r\n        this.setState({\r\n            appDataModel: this.localAppDataModel\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <PAProvider value = {{state:this.state, updateState:this.updateState}}>\r\n                {this.props.children}\r\n            </PAProvider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PAContextProvider;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PAContextProvider from \"./App/DataModel/PA-ContextProvider\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render(){\n    console.log(\"appDataModel\",this)\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n\n}\n\n\nApp.contextType = PAContextProvider;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\r\nimport \"./LoginPage.scss\";\r\nimport {InputText} from 'primereact/inputtext';\r\nimport 'primereact/resources/themes/nova-light/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\nimport { Redirect } from 'react-router';\r\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\r\n\r\nclass LoginPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            username: \"\",\r\n            password: \"\"\r\n        }\r\n    }\r\n\r\n    handleOnClick = () => {\r\n        // some action...\r\n        // then redirect\r\n        this.setState({redirect: true});\r\n      }\r\n    render() {\r\n        if (this.state.redirect) {\r\n            return <Redirect push to=\"/register\" />;\r\n          }\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"navbar-header\">\r\n                    Login\r\n                </div>\r\n                <div class=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4 col-lg-4\"></div>\r\n                    <div className=\"col-md-4 col-lg-4\">\r\n\r\n                    <div className=\"form-group\"></div>\r\n                    <div className=\"form-group\">\r\n                    <span className=\"p-float-label\">\r\n                        <InputText id=\"in\" value={this.state.username} onChange={(e) => this.setState({username: e.target.value})} />\r\n                        <label htmlFor=\"in\">Username or Email Address</label>\r\n                    </span>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                    <span className=\"p-float-label\">\r\n                        <InputText id=\"in\" value={this.state.password} onChange={(e) => this.setState({password: e.target.value})} />\r\n                        <label htmlFor=\"in\">Password</label>\r\n                    </span>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <span className=\"p-float-label submit-btn\">\r\n                            <button type=\"submit\" className=\"btn btn-default\">Submit</button>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <span className=\"p-float-label submit-btn\">\r\n                            Not registered yet? Register Now\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <span className=\"p-float-label submit-btn\">\r\n                            <button type=\"submit\" className=\"btn btn-default\" onClick={this.handleOnClick}>Register</button>\r\n                        </span>\r\n                    </div>\r\n                   \r\n                    {/* <form>\r\n                        <div className=\"form-group\">\r\n                            <label for=\"exampleInputEmail1\">Email address</label>\r\n                            <input type=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"Email\"></input>\r\n                        </div>\r\n\r\n                        <span className=\"p-float-label\">\r\n    <InputText id=\"in\" value={this.state.value} onChange={(e) => this.setState({value: e.target.value})} />\r\n    <label htmlFor=\"in\">Username</label>\r\n</span>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label for=\"exampleInputPassword1\">Password</label>\r\n                            <input type=\"password\" className=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\"></input>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label for=\"exampleInputFile\">File input</label>\r\n                            <input type=\"file\" id=\"exampleInputFile\"/>\r\n                            <p className=\"help-block\">Example block-level help text here.</p>\r\n                        </div>\r\n                        <div className=\"checkbox\">\r\n                            <label>\r\n                            <input type=\"checkbox\"></input>Check me Out\r\n                            </label>\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-default\">Submit</button>\r\n                        </form> */}\r\n                    </div>\r\n                </div>\r\n</div>\r\n\r\n                \r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginPage;","import React, { Component } from \"react\";\r\nimport \"./Register.scss\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Password } from \"primereact/password\";\r\nimport \"primereact/resources/themes/nova-light/theme.css\";\r\nimport \"primereact/resources/primereact.min.css\";\r\nimport \"primeicons/primeicons.css\";\r\nimport { Messages } from \"primereact/messages\";\r\nimport { Message } from \"primereact/message\";\r\nimport { Button } from \"primereact/button\";\r\nimport { Redirect } from \"react-router\";\r\nimport { Route, Link, BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      firstname: \"\",\r\n      lastname: \"\",\r\n      firstpassword: \"\",\r\n      secondpassword: \"\",\r\n      email: \"\"\r\n    };\r\n  }\r\n\r\n  handleOnClick = () => {\r\n    // some action...\r\n    // then redirect\r\n    this.setState({ redirect: true });\r\n  };\r\n\r\n  checkForAlltheFields = () => {\r\n    let state = this.state;\r\n    let flag = true,\r\n      emptyField = \"\";\r\n    Object.keys(state).some(each => {\r\n      if (state[each].length === 0) {\r\n        flag = false;\r\n        emptyField = each;\r\n        return emptyField;\r\n      }\r\n    });\r\n    return { flag: flag, emptyField: emptyField };\r\n  };\r\n\r\n  checkForPasswordMatch = (passwordField, passwordValue) => {\r\n    let obj = {};\r\n    obj[passwordField] = passwordValue;\r\n    let passFlag = false;\r\n    this.setState(obj, () => {\r\n      let passValue =\r\n        passwordField === \"firstpassword\"\r\n          ? this.state.secondpassword\r\n          : this.state.firstpassword;\r\n      if (passValue === passwordValue && this.state.secondpassword.length > 0) {\r\n        passFlag = true;\r\n        // this.showInfo(\"Password Matched!\")\r\n      }\r\n    });\r\n    return passFlag;\r\n  };\r\n\r\n  checkForPasswordPattern = () => {\r\n    let givenpass = this.state.firstpassword;\r\n    // if(givenpass.length)\r\n\r\n    return givenpass.length > 0 ? true : false;\r\n  };\r\n\r\n  checkForEmailPattern = () => {\r\n    let re = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\r\n    return re.test(this.state.email);\r\n  };\r\n\r\n  onSubmitRegister = () => {\r\n    let x = this.checkForAlltheFields();\r\n    // let y = this.checkForEmailPattern();\r\n    let y = true;\r\n    // let passMatch = this.checkForPasswordMatch();\r\n    // let passCheck = this.checkForPasswordPattern();\r\n    let passMatch = true;\r\n    let passCheck = true;\r\n    console.log(x);\r\n    if (x.flag) {\r\n      if (y && passMatch && passCheck) {\r\n        /** There will be service call if x.flag is true. That means users has entered proper data\r\n         * After successfull service call showSuccess function will be called to show success message to user.\r\n         */\r\n        this.showSuccess(\"Successfully registered\");\r\n      } else if (!y && passMatch) {\r\n        this.showWarn(\"Invalid email format\");\r\n      } else if (!passCheck) {\r\n        this.showWarn(\"Password should contain at least 8 characters\");\r\n      } else if ((y && !passMatch) || (!y && !passMatch)) {\r\n        this.showWarn(\"Password did not match\");\r\n      }\r\n    } else {\r\n      this.showError(\"Every field is required!\");\r\n    }\r\n  };\r\n\r\n  showSuccess(detail) {\r\n    this.messages.show({\r\n      severity: \"success\",\r\n      summary: \"Success Message\",\r\n      detail: detail\r\n    });\r\n  }\r\n\r\n  showInfo(detail) {\r\n    this.messages.show({\r\n      severity: \"info\",\r\n      summary: \"Info Message\",\r\n      detail: detail\r\n    });\r\n  }\r\n\r\n  showWarn(detail) {\r\n    this.messages.show({ severity: \"warn\", summary: \"\", detail: detail });\r\n  }\r\n\r\n  showError(detail) {\r\n    this.messages.show({ severity: \"error\", summary: \"\", detail: detail });\r\n  }\r\n  render() {\r\n    // this.messages && this.messages.clear();\r\n    if (this.state.redirect) {\r\n      return <Redirect push to=\"/\" />;\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        {/* <Button onClick={()=>this.showSuccess()} label=\"Success\" className=\"p-button-success\" /> */}\r\n\r\n        <div className=\"navbar-header\">Register</div>\r\n        <div className=\"messages-de\">\r\n          <Messages ref={el => (this.messages = el)}></Messages>\r\n        </div>\r\n\r\n        <div class=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4 col-lg-4\"></div>\r\n            <div className=\"col-md-4 col-lg-4\">\r\n              <div className=\"form-group\"></div>\r\n              <div className=\"form-group\">\r\n                <span className=\"p-float-label\">\r\n                  <InputText\r\n                    id=\"in\"\r\n                    value={this.state.firstname}\r\n                    onChange={e => this.setState({ firstname: e.target.value })}\r\n                  />\r\n                  <label htmlFor=\"in\">First Name</label>\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <span className=\"p-float-label\">\r\n                  <InputText\r\n                    id=\"in\"\r\n                    value={this.state.lastname}\r\n                    onChange={e => this.setState({ lastname: e.target.value })}\r\n                  />\r\n                  <label htmlFor=\"in\">Last Name</label>\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <span className=\"p-float-label\">\r\n                  <Password\r\n                    feedback={false}\r\n                    id=\"in\"\r\n                    value={this.state.firstpassword}\r\n                    onChange={e =>\r\n                      this.checkForPasswordMatch(\r\n                        \"firstpassword\",\r\n                        e.target.value\r\n                      )\r\n                    }\r\n                  />\r\n                  <label htmlFor=\"in\">Password</label>\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <span className=\"p-float-label\">\r\n                  <Password\r\n                    feedback={false}\r\n                    id=\"in\"\r\n                    value={this.state.secondpassword}\r\n                    onChange={e =>\r\n                      this.checkForPasswordMatch(\r\n                        \"secondpassword\",\r\n                        e.target.value\r\n                      )\r\n                    }\r\n                  />\r\n                  <label htmlFor=\"in\">Confirm Password</label>\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <span className=\"p-float-label\">\r\n                  <InputText\r\n                    type=\"email\"\r\n                    id=\"in\"\r\n                    value={this.state.email}\r\n                    onChange={e => this.setState({ email: e.target.value })}\r\n                  />\r\n                  <label htmlFor=\"in\">Email</label>\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <span className=\"p-float-label submit-btn\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-default\"\r\n                    onClick={() => this.onSubmitRegister()}\r\n                  >\r\n                    Submit\r\n                  </button>\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <span className=\"p-float-label submit-btn\">\r\n                  Already registered? Go to Login\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <span className=\"p-float-label submit-btn\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-default\"\r\n                    onClick={() => this.handleOnClick()}\r\n                  >\r\n                    Login\r\n                  </button>\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport PAContextProvider from './App/DataModel/PA-ContextProvider';\nimport LoginPage from './Components/LoginPage/LoginPage';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nimport Register from \"./Components/Register/Register\"\n\n// import PixLetDashboard from './PixLet-Dashboard';\n\nconst routing = (\n    <Router>\n      <div>\n      {/* <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/users\">Users</Link>\n        </li>\n        <li>\n          <Link to=\"/contact\">Contact</Link>\n        </li>\n      </ul> */}\n        <Route exact path=\"/\" component={LoginPage} />\n        <Route path=\"/register\" component={Register} />\n        {/* <Route path=\"/contact\" component={Contact} /> */}\n      </div>\n    </Router>\n  )\n\nconst PixLet = (<PAContextProvider>{routing}</PAContextProvider>)\nReactDOM.render(PixLet, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}